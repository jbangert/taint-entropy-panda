// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef PROTOBUF_trace_2eproto__INCLUDED
#define PROTOBUF_trace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tentropy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_trace_2eproto();
void protobuf_AssignDesc_trace_2eproto();
void protobuf_ShutdownFile_trace_2eproto();

class CryptoTrace;
class CryptoTrace_MemAccess;

// ===================================================================

class CryptoTrace_MemAccess : public ::google::protobuf::Message {
 public:
  CryptoTrace_MemAccess();
  virtual ~CryptoTrace_MemAccess();

  CryptoTrace_MemAccess(const CryptoTrace_MemAccess& from);

  inline CryptoTrace_MemAccess& operator=(const CryptoTrace_MemAccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoTrace_MemAccess& default_instance();

  void Swap(CryptoTrace_MemAccess* other);

  // implements Message ----------------------------------------------

  CryptoTrace_MemAccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CryptoTrace_MemAccess& from);
  void MergeFrom(const CryptoTrace_MemAccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::uint64 addr() const;
  inline void set_addr(::google::protobuf::uint64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:tentropy.CryptoTrace.MemAccess)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 addr_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_trace_2eproto();
  friend void protobuf_AssignDesc_trace_2eproto();
  friend void protobuf_ShutdownFile_trace_2eproto();

  void InitAsDefaultInstance();
  static CryptoTrace_MemAccess* default_instance_;
};
// -------------------------------------------------------------------

class CryptoTrace : public ::google::protobuf::Message {
 public:
  CryptoTrace();
  virtual ~CryptoTrace();

  CryptoTrace(const CryptoTrace& from);

  inline CryptoTrace& operator=(const CryptoTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoTrace& default_instance();

  void Swap(CryptoTrace* other);

  // implements Message ----------------------------------------------

  CryptoTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CryptoTrace& from);
  void MergeFrom(const CryptoTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CryptoTrace_MemAccess MemAccess;

  // accessors -------------------------------------------------------

  // required uint64 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::uint64 start() const;
  inline void set_start(::google::protobuf::uint64 value);

  // required uint64 end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::uint64 end() const;
  inline void set_end(::google::protobuf::uint64 value);

  // repeated .tentropy.CryptoTrace.MemAccess write = 3;
  inline int write_size() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 3;
  inline const ::tentropy::CryptoTrace_MemAccess& write(int index) const;
  inline ::tentropy::CryptoTrace_MemAccess* mutable_write(int index);
  inline ::tentropy::CryptoTrace_MemAccess* add_write();
  inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
      write() const;
  inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
      mutable_write();

  // repeated .tentropy.CryptoTrace.MemAccess read = 4;
  inline int read_size() const;
  inline void clear_read();
  static const int kReadFieldNumber = 4;
  inline const ::tentropy::CryptoTrace_MemAccess& read(int index) const;
  inline ::tentropy::CryptoTrace_MemAccess* mutable_read(int index);
  inline ::tentropy::CryptoTrace_MemAccess* add_read();
  inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
      read() const;
  inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
      mutable_read();

  // repeated .tentropy.CryptoTrace.MemAccess code = 5;
  inline int code_size() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 5;
  inline const ::tentropy::CryptoTrace_MemAccess& code(int index) const;
  inline ::tentropy::CryptoTrace_MemAccess* mutable_code(int index);
  inline ::tentropy::CryptoTrace_MemAccess* add_code();
  inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
      code() const;
  inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
      mutable_code();

  // @@protoc_insertion_point(class_scope:tentropy.CryptoTrace)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 start_;
  ::google::protobuf::uint64 end_;
  ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess > write_;
  ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess > read_;
  ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess > code_;
  friend void  protobuf_AddDesc_trace_2eproto();
  friend void protobuf_AssignDesc_trace_2eproto();
  friend void protobuf_ShutdownFile_trace_2eproto();

  void InitAsDefaultInstance();
  static CryptoTrace* default_instance_;
};
// ===================================================================


// ===================================================================

// CryptoTrace_MemAccess

// required uint64 addr = 1;
inline bool CryptoTrace_MemAccess::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CryptoTrace_MemAccess::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CryptoTrace_MemAccess::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CryptoTrace_MemAccess::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
inline ::google::protobuf::uint64 CryptoTrace_MemAccess::addr() const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.MemAccess.addr)
  return addr_;
}
inline void CryptoTrace_MemAccess::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:tentropy.CryptoTrace.MemAccess.addr)
}

// required bytes data = 2;
inline bool CryptoTrace_MemAccess::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CryptoTrace_MemAccess::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CryptoTrace_MemAccess::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CryptoTrace_MemAccess::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CryptoTrace_MemAccess::data() const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.MemAccess.data)
  return *data_;
}
inline void CryptoTrace_MemAccess::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:tentropy.CryptoTrace.MemAccess.data)
}
inline void CryptoTrace_MemAccess::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:tentropy.CryptoTrace.MemAccess.data)
}
inline void CryptoTrace_MemAccess::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tentropy.CryptoTrace.MemAccess.data)
}
inline ::std::string* CryptoTrace_MemAccess::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tentropy.CryptoTrace.MemAccess.data)
  return data_;
}
inline ::std::string* CryptoTrace_MemAccess::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CryptoTrace_MemAccess::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tentropy.CryptoTrace.MemAccess.data)
}

// -------------------------------------------------------------------

// CryptoTrace

// required uint64 start = 1;
inline bool CryptoTrace::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CryptoTrace::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CryptoTrace::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CryptoTrace::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::uint64 CryptoTrace::start() const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.start)
  return start_;
}
inline void CryptoTrace::set_start(::google::protobuf::uint64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:tentropy.CryptoTrace.start)
}

// required uint64 end = 2;
inline bool CryptoTrace::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CryptoTrace::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CryptoTrace::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CryptoTrace::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::uint64 CryptoTrace::end() const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.end)
  return end_;
}
inline void CryptoTrace::set_end(::google::protobuf::uint64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:tentropy.CryptoTrace.end)
}

// repeated .tentropy.CryptoTrace.MemAccess write = 3;
inline int CryptoTrace::write_size() const {
  return write_.size();
}
inline void CryptoTrace::clear_write() {
  write_.Clear();
}
inline const ::tentropy::CryptoTrace_MemAccess& CryptoTrace::write(int index) const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.write)
  return write_.Get(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::mutable_write(int index) {
  // @@protoc_insertion_point(field_mutable:tentropy.CryptoTrace.write)
  return write_.Mutable(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::add_write() {
  // @@protoc_insertion_point(field_add:tentropy.CryptoTrace.write)
  return write_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
CryptoTrace::write() const {
  // @@protoc_insertion_point(field_list:tentropy.CryptoTrace.write)
  return write_;
}
inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
CryptoTrace::mutable_write() {
  // @@protoc_insertion_point(field_mutable_list:tentropy.CryptoTrace.write)
  return &write_;
}

// repeated .tentropy.CryptoTrace.MemAccess read = 4;
inline int CryptoTrace::read_size() const {
  return read_.size();
}
inline void CryptoTrace::clear_read() {
  read_.Clear();
}
inline const ::tentropy::CryptoTrace_MemAccess& CryptoTrace::read(int index) const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.read)
  return read_.Get(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::mutable_read(int index) {
  // @@protoc_insertion_point(field_mutable:tentropy.CryptoTrace.read)
  return read_.Mutable(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::add_read() {
  // @@protoc_insertion_point(field_add:tentropy.CryptoTrace.read)
  return read_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
CryptoTrace::read() const {
  // @@protoc_insertion_point(field_list:tentropy.CryptoTrace.read)
  return read_;
}
inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
CryptoTrace::mutable_read() {
  // @@protoc_insertion_point(field_mutable_list:tentropy.CryptoTrace.read)
  return &read_;
}

// repeated .tentropy.CryptoTrace.MemAccess code = 5;
inline int CryptoTrace::code_size() const {
  return code_.size();
}
inline void CryptoTrace::clear_code() {
  code_.Clear();
}
inline const ::tentropy::CryptoTrace_MemAccess& CryptoTrace::code(int index) const {
  // @@protoc_insertion_point(field_get:tentropy.CryptoTrace.code)
  return code_.Get(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::mutable_code(int index) {
  // @@protoc_insertion_point(field_mutable:tentropy.CryptoTrace.code)
  return code_.Mutable(index);
}
inline ::tentropy::CryptoTrace_MemAccess* CryptoTrace::add_code() {
  // @@protoc_insertion_point(field_add:tentropy.CryptoTrace.code)
  return code_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >&
CryptoTrace::code() const {
  // @@protoc_insertion_point(field_list:tentropy.CryptoTrace.code)
  return code_;
}
inline ::google::protobuf::RepeatedPtrField< ::tentropy::CryptoTrace_MemAccess >*
CryptoTrace::mutable_code() {
  // @@protoc_insertion_point(field_mutable_list:tentropy.CryptoTrace.code)
  return &code_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tentropy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trace_2eproto__INCLUDED
